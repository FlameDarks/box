<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/aop
       https://www.springframework.org/schema/aop/spring-aop.xsd">

    <context:component-scan base-package="com.zx">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>


    <context:property-placeholder location="classpath:dbconfig.properties"/>
    <bean id="comboPooledDataSource" class="com.alibaba.druid.pool.DruidDataSource" lazy-init="true">
<!--    <bean id="comboPooledDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">-->
<!--        <property name="jdbcUrl" value="${jdbcurl}"/>-->
<!--        <property name="driverClass" value="${driverclass}"/>-->
<!--        <property name="user" value="${user}"/>-->
<!--        <property name="password" value="${password}"/>-->
        <property name="driverClassName" value="${driverclass}"/>
        <property name="url" value="${jdbcurl}"/>
        <property name="username" value="${user}"/>
        <property name="password" value="${password}"/>
        <!--连接池中最大连接数量-->
        <property name="maxActive" value="15"/>
        <!--数据库连接池中最少连接数量-->
        <property name="minIdle" value="5"/>
    </bean>

    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <property name="dataSource" ref="comboPooledDataSource"/>
        <property name="mapperLocations" value="classpath:mapper/*.xml"/>
    </bean>

    <bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.zx.dao"/>
    </bean>

<!--    执行批量SqlSession-->
    <bean id="sessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"/>
        <constructor-arg name="executorType" value="BATCH"/>

    </bean>

    <bean id="dataSourceTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="comboPooledDataSource"/>
    </bean>

    <aop:config>
        <aop:pointcut id="txPoint" expression="execution(* com.zx.service..*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPoint"/>
    </aop:config>

    <tx:advice id="txAdvice" transaction-manager="dataSourceTransactionManager">
        <tx:attributes>
            <tx:method name="*"/>
            <tx:method name="get*" read-only="true"/>
        </tx:attributes>
    </tx:advice>

    <!--
    1. 配置 SecurityManager!
    -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="cacheManager" ref="cacheManager"/>
<!--        <property name="sessionMode" value="native"/>-->
<!--        <property name="authenticator" ref="authenticator"/>-->
        <property name="realm" ref="jdbcRealm"/>

<!--        <property name="realms" ref="jdbcRealm"/>-->

<!--        <property name="rememberMeManager.cookie.maxAge" value="10"></property>-->
    </bean>

<!--    2. 配置 CacheManager.-->
<!--    2.1 需要加入 ehcache 的 jar 包及配置文件.-->

    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <property name="cacheManagerConfigFile" value="classpath:ehcache.xml"/>
    </bean>

<!--    <bean id="authenticator"-->
<!--          class="org.apache.shiro.authc.pam.ModularRealmAuthenticator">-->
<!--        <property name="authenticationStrategy">-->
<!--            <bean class="org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy"/>-->
<!--        </property>-->
<!--    </bean>-->

    <!--
    	3. 配置 Realm
    	3.1 直接配置实现了 org.apache.shiro.realm.Realm 接口的 bean
    -->
    <bean id="jdbcRealm" class="com.zx.shiro.ShiroRealm">
        <property name="credentialsMatcher">
            <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
                <property name="hashAlgorithmName" value="MD5"/>
                <property name="hashIterations" value="1024"/>
            </bean>
        </property>
    </bean>

<!--    <bean id="secondRealm" class="com.atguigu.shiro.realms.SecondRealm">-->
<!--        <property name="credentialsMatcher">-->
<!--            <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">-->
<!--                <property name="hashAlgorithmName" value="SHA1"></property>-->
<!--                <property name="hashIterations" value="1024"></property>-->
<!--            </bean>-->
<!--        </property>-->
<!--    </bean>-->

    <!--
    4. 配置 LifecycleBeanPostProcessor. 可以自定的来调用配置在 Spring IOC 容器中 shiro bean 的生命周期方法.
    -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

    <!--
    5. 启用 IOC 容器中使用 shiro 的注解. 但必须在配置了 LifecycleBeanPostProcessor 之后才可以使用.
    -->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
          depends-on="lifecycleBeanPostProcessor">
    <property name="proxyTargetClass" value="true"/>
    </bean>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>

    <!--
    6. 配置 ShiroFilter.
    6.1 id 必须和 web.xml 文件中配置的 DelegatingFilterProxy 的 <filter-name> 一致.
                      若不一致, 则会抛出: NoSuchBeanDefinitionException. 因为 Shiro 会来 IOC 容器中查找和 <filter-name> 名字对应的 filter bean.
    -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <property name="loginUrl" value="/index.jsp"/>
        <property name="successUrl" value="/admin.jsp"/>
        <property name="unauthorizedUrl" value="/index.jsp"/>

<!--        <property name="filterChainDefinitionMap" ref="filterChainDefinitionMap"></property>-->

        <!--
        	配置哪些页面需要受保护.
        	以及访问这些页面需要的权限.
        	1). anon 可以被匿名访问
        	2). authc 必须认证(即登录)后才可能访问的页面.
        	3). logout 登出.
        	4). roles 角色过滤器
        -->

        <property name="filterChainDefinitions">
            <value>
                /index.jsp = anon
                /static/** = anon
                /user/selectUser = anon
                /user/saveUser = anon
                /user/checkUser = anon

                /page6 = authc,roles[admin]
                /admin/** = authc,roles[admin]
                /getout = authc,roles[admin]

                /page? = authc,roles[user]
                /user/** = authc,roles[user]
                /notebook/** = authc,roles[user]
                /contact/** = authc,roles[user]
                /bookmark/** = authc,roles[user]
                /cloud/** = authc,roles[user]
                /upload/image = authc,roles[user]
                /select = authc,roles[user]

                /logout = logout

                # everything else requires authentication:
                /** = authc
            </value>
        </property>
    </bean>
</beans>